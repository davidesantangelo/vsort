# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake for Linux
      if: runner.os == 'Linux'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_C_FLAGS="-O3 -ffast-math -ftree-vectorize -funroll-loops"
        -DCMAKE_CXX_FLAGS="-O3 -ffast-math -ftree-vectorize -funroll-loops"
        -S ${{ github.workspace }}

    - name: Create Windows CMakeLists.txt
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $content = @"
        cmake_minimum_required(VERSION 3.14)
        project(vsort C)

        # Set version
        set(VSORT_VERSION "0.2.1")
        add_definitions(-DVSORT_VERSION="\\"${VSORT_VERSION}\\"")
        add_definitions(-D_CRT_SECURE_NO_WARNINGS)

        # Add optimization flags
        set(CMAKE_C_FLAGS "/O2 /Ot /GL")

        # Create static library
        add_library(vsort STATIC vsort.c)
        target_include_directories(vsort PUBLIC \${CMAKE_CURRENT_SOURCE_DIR})

        # Example executable
        add_executable(basic_example examples/basic_example.c)
        target_link_libraries(basic_example vsort)

        # Setup tests
        enable_testing()
        add_test(NAME basic_example COMMAND basic_example)
        "@
        
        # Back up the original CMakeLists.txt
        Rename-Item -Path "${{ github.workspace }}/CMakeLists.txt" -NewName "CMakeLists.txt.bak" -Force
        # Create our simplified Windows version
        Set-Content -Path "${{ github.workspace }}/CMakeLists.txt" -Value $content
    
    - name: Configure CMake for Windows
      if: runner.os == 'Windows'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Restore Original CMakeLists.txt 
      if: runner.os == 'Windows' && always()
      shell: pwsh
      run: |
        if (Test-Path "${{ github.workspace }}/CMakeLists.txt.bak") {
          Remove-Item -Path "${{ github.workspace }}/CMakeLists.txt" -Force
          Rename-Item -Path "${{ github.workspace }}/CMakeLists.txt.bak" -NewName "CMakeLists.txt" -Force
        }
